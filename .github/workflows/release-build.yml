name: Build Release Packages

on:
  workflow_dispatch:

env:
  APP_RELEASE_VERSION: ${{ vars.APP_RELEASE_VERSION }}
  BUILD_RELEASE_TAG: ${{ vars.BUILD_RELEASE_TAG }}

jobs:
  build-jar-release:
    name: Build JAR Package on Linux
    runs-on: ubuntu-latest
    steps:
      # SETUP BUILD ENVIRONMENT
      - id: checkout-code
        name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: main
      - id: setup-jdk
        name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17

      # BUILD FOR DISTRIBUTION
      - id: build
        name: Build distribution
        run: |
          sh build-jar-release.sh

      # SAVE INSTALLER
      - id: upload-installer
        name: Upload installer
        uses: actions/upload-artifact@v3
        with:
          path: ./app/build/distributions/app.zip
          name: jar-release
          retention-days: 1
  build-linux-installer:
    name: Build Installer on Linux
    runs-on: ubuntu-latest
    steps:
      # SETUP BUILD ENVIRONMENT
      - id: checkout-code
        name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: main
      - id: setup-jdk
        name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17

      # BUILD FOR DISTRIBUTION
      - id: build
        name: Build distribution
        run: |
          sh build-linux-release.sh

      # SAVE INSTALLER
      - id: upload-installer
        name: Upload installer
        uses: actions/upload-artifact@v3
        with:
          path: ./build/distributions/basic4glj_${{ vars.APP_RELEASE_VERSION }}-1_amd64.deb
          name: linux-installer
          retention-days: 1

  build-windows-installer:
    name: Build Installer on Windows
    runs-on: windows-latest
    env:
      WIN_UPGRADE_UUID: ${{ vars.WIN_UPGRADE_UUID }}
    steps:
      # SETUP BUILD ENVIRONMENT
      - id: checkout-code
        name: Checkout code
        uses: actions/checkout@v3
      - id: setup-jdk
        name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17

      # BUILD FOR DISTRIBUTION
      - id: build
        name: Build distribution
        run: |
          sh build-windows-release.sh

      # SAVE INSTALLER
      - id: upload-installer
        name: Upload installer
        uses: actions/upload-artifact@v3
        with:
          path: ./build/distributions/Basic4GLj-${{ vars.APP_RELEASE_VERSION }}.msi
          name: windows-installer
          retention-days: 1

  build-macos-installer:
    name: Build Installer on MacOS
    runs-on: macos-latest
    steps:
      # SETUP BUILD ENVIRONMENT
      - id: checkout-code
        name: Checkout code
        uses: actions/checkout@v3
      - id: setup-jdk
        name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17

      # BUILD FOR DISTRIBUTION
      - id: build
        name: Build distribution
        run: |
          sh build-mac-release.sh

      # SAVE INSTALLER
      - id: upload-installer
        name: Upload installer
        uses: actions/upload-artifact@v3
        with:
          path: ./build/distributions/Basic4GLj-${{ vars.APP_RELEASE_VERSION }}.dmg
          name: macos-installer
          retention-days: 1
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    environment: Production
    permissions:
      contents: write
      deployments: write
    needs: [build-jar-release, build-linux-installer, build-windows-installer, build-macos-installer]
    steps:

      # DOWNLOAD INSTALLERS

      - id: download-jar-release
        name: Download JAR Release
        uses: actions/download-artifact@v3
        with:
          name: jar-release

      - id: download-linux-installer
        name: Download Linux installer
        uses: actions/download-artifact@v3
        with:
          name: linux-installer

      - id: download-windows-installer
        name: Download Windows installer
        uses: actions/download-artifact@v3
        with:
          name: windows-installer

      - id: download-macos-installer
        name: Download Mac installer
        uses: actions/download-artifact@v3
        with:
          name: macos-installer

      - id: rename-downloaded-files
        name: Rename downloaded files
        run: |
          ls -alR
          mv app.zip Basic4GLj.${{ vars.BUILD_RELEASE_TAG }}.zip
          # rename artifacts to match release tag for pre-release builds < 1.0 for now;
          # macos builds require versions start with 1.X, but alpha builds are currently tagged as 0.X
          mv Basic4GLj-${{ vars.APP_RELEASE_VERSION }}.msi Basic4GLj-${{ vars.BUILD_RELEASE_TAG }}.msi
          mv Basic4GLj-${{ vars.APP_RELEASE_VERSION }}.dmg Basic4GLj-${{ vars.BUILD_RELEASE_TAG }}.dmg
          mv basic4glj_${{ vars.APP_RELEASE_VERSION }}-1_amd64.deb basic4glj_${{ vars.BUILD_RELEASE_TAG }}.deb
          ls -alR

      # CREATE GITHUB RELEASE AND ADD ASSETS
      - id: tag
        name: Move release tag
        shell: bash
        if: false
        run: |
          # Move tag
          git tag -d ${{ vars.BUILD_RELEASE_TAG }}
          git push --delete origin ${{ vars.BUILD_RELEASE_TAG }}
          git tag -a ${{ vars.BUILD_RELEASE_TAG }} -m "${{ vars.BUILD_RELEASE_TAG }}"
          git push --follow-tags
      - id: create-release
        name: Create GitHub release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ vars.BUILD_RELEASE_TAG }}
          release_name: ${{ vars.BUILD_RELEASE_TAG }}
          draft: true
          prerelease: true
      - id: release-jar-package
        name: Release JAR package
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: Basic4GLj.${{ vars.BUILD_RELEASE_TAG }}.zip
          asset_name: JAR packages
          asset_content_type: application/x-binary
      - id: release-linux-installer
        name: Release Linux installer
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: basic4glj_${{ vars.BUILD_RELEASE_TAG }}.deb
          asset_name: basic4glj_${{ vars.BUILD_RELEASE_TAG }}.deb
          asset_content_type: application/x-binary
      - id: release-windows-installer
        name: Release Windows installer
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: Basic4GLj-${{ vars.BUILD_RELEASE_TAG }}.msi
          asset_name: Basic4GLj-${{ vars.BUILD_RELEASE_TAG }}.msi
          asset_content_type: application/x-binary
      - id: release-macos-installer
        name: Release Mac DMG
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: Basic4GLj-${{ vars.BUILD_RELEASE_TAG }}.dmg
          asset_name: Basic4GLj-${{ vars.BUILD_RELEASE_TAG }}.dmg
          asset_content_type: application/x-binary