name: Build Release Packages

permissions:
  contents: read
  packages: write

on:
  workflow_dispatch:

env:
  APP_RELEASE_VERSION: ${{ vars.APP_RELEASE_VERSION }}
  BUILD_RELEASE_TAG: ${{ vars.BUILD_RELEASE_TAG }}

jobs:
  build-jar-release:
    name: Build JAR Package on Linux
    runs-on: ubuntu-latest
    steps:
      # SETUP BUILD ENVIRONMENT
      - id: checkout-code
        name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
      - id: setup-jdk
        name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: 17

      # BUILD FOR DISTRIBUTION
      - id: build
        name: Build distribution
        run: |
          sh build-jar-release.sh

      # SAVE INSTALLER
      - id: upload-installer
        name: Upload installer
        uses: actions/upload-artifact@v4
        with:
          path: ./app/build/distributions/app.zip
          name: jar-release
          retention-days: 1
  build-linux-installer:
    name: Build Installer on Linux
    runs-on: ubuntu-latest
    steps:
      # SETUP BUILD ENVIRONMENT
      - id: checkout-code
        name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
      - id: setup-jdk
        name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: 17

      # BUILD FOR DISTRIBUTION
      - id: build
        name: Build distribution
        run: |
          sh build-linux-release.sh

      # SAVE INSTALLER
      - id: upload-installer
        name: Upload installer
        uses: actions/upload-artifact@v4
        with:
          path: ./build/distributions/basic4glj_${{ vars.APP_RELEASE_VERSION }}-1_amd64.deb
          name: linux-installer
          retention-days: 1

  build-windows-installer:
    name: Build Installer on Windows
    runs-on: windows-latest
    env:
      WIN_UPGRADE_UUID: ${{ vars.WIN_UPGRADE_UUID }}
    steps:
      # SETUP BUILD ENVIRONMENT
      - id: checkout-code
        name: Checkout code
        uses: actions/checkout@v4
      - id: setup-jdk
        name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: 17

      # BUILD FOR DISTRIBUTION
      - id: build
        name: Build distribution
        run: |
          sh build-windows-release.sh

      # SAVE INSTALLER
      - id: upload-installer
        name: Upload installer
        uses: actions/upload-artifact@v4
        with:
          path: ./build/distributions/Basic4GLj-${{ vars.APP_RELEASE_VERSION }}.msi
          name: windows-installer
          retention-days: 1

  build-macos-arm64-installer:
    name: Build Installer on MacOS (arm64)
    runs-on: macos-latest
    steps:
      # SETUP BUILD ENVIRONMENT
      - id: checkout-code
        name: Checkout code
        uses: actions/checkout@v4
      - id: setup-jdk
        name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: 17
      - id: set-up-homebrew
        name: Set up Homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - id: keychain
        name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.MAC_SIGNING_BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.MAC_SIGNING_P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.MAC_SIGNING_EMBEDDED_PROVISIONPROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.MAC_SIGNING_KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/embedded.provisionprofile
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output "$CERTIFICATE_PATH"
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output "$PP_PATH"
          
          echo "import certificate to keychain"
          security import "$CERTIFICATE_PATH" -P "$P12_PASSWORD" -A -t cert -f pkcs12
          security list-keychains -d user -s $(security list-keychains -d user | sed -e s/\"//g) "$KEYCHAIN_PATH"
          
          # apply provisioning profile
          echo "PP_PATH=\"$PP_PATH\"" >> $GITHUB_OUTPUT
          echo "KEYCHAIN_PATH=\"$KEYCHAIN_PATH\"" >> $GITHUB_OUTPUT

      # env file
      - id: env
        name: 'Create env file'
        run: |
          touch .env
          echo APP_RELEASE_VERSION=\""${{ vars.APP_RELEASE_VERSION }}"\" >> .env
          echo MAC_SIGNING_TEAM_ID=\""${{ secrets.MAC_SIGNING_TEAM_ID }}"\" >> .env
          echo MAC_SIGNING_KEY_USER_NAME=\""${{ secrets.MAC_SIGNING_KEY_USER_NAME }}"\" >> .env
          echo MAC_SIGNING_NOTARIZATION_USER_NAME=\""${{ secrets.MAC_SIGNING_NOTARIZATION_USER_NAME }}"\" >> .env
          echo MAC_SIGNING_NOTARIZATION_PASSWORD=\""${{ secrets.MAC_SIGNING_NOTARIZATION_PASSWORD }}"\" >> .env
          echo MAC_SIGNING_EMBEDDED_PROVISIONPROFILE_FILE_PATH=\""${{ steps.keychain.outputs.PP_PATH }}"\" >> .env

      # BUILD FOR DISTRIBUTION
      - id: build
        name: Build distribution
        run: |
          brew install coreutils
          sh build-mac-release.sh
          sh build-mac-notarize.sh

      # SAVE INSTALLER
      - id: upload-installer
        name: Upload installer
        uses: actions/upload-artifact@v4
        with:
          path: ./build/distributions/Basic4GLj-${{ vars.APP_RELEASE_VERSION }}.dmg
          name: macos-arm64-installer
          retention-days: 1

  build-macos-intel-installer:
    name: Build Installer on MacOS (Intel)
    runs-on: macos-13
    steps:
      # SETUP BUILD ENVIRONMENT
      - id: checkout-code
        name: Checkout code
        uses: actions/checkout@v4
      - id: setup-jdk
        name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: 17
      - id: set-up-homebrew
        name: Set up Homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - id: keychain
        name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.MAC_SIGNING_BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.MAC_SIGNING_P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.MAC_SIGNING_EMBEDDED_PROVISIONPROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.MAC_SIGNING_KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/embedded.provisionprofile
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode > "$CERTIFICATE_PATH"
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode > "$PP_PATH"
          
          
          echo "import certificate to keychain"
          security import "$CERTIFICATE_PATH" -P "$P12_PASSWORD" -A -t cert -f pkcs12
          security list-keychains -d user -s $(security list-keychains -d user | sed -e s/\"//g) "$KEYCHAIN_PATH"
          
          # apply provisioning profile
          echo "PP_PATH=\"$PP_PATH\"" >> $GITHUB_OUTPUT
          echo "KEYCHAIN_PATH=\"$KEYCHAIN_PATH\"" >> $GITHUB_OUTPUT

      # env file
      - id: env
        name: 'Create env file'
        run: |
          touch .env
          echo APP_RELEASE_VERSION=\""${{ vars.APP_RELEASE_VERSION }}"\" >> .env
          echo MAC_SIGNING_TEAM_ID=\""${{ secrets.MAC_SIGNING_TEAM_ID }}"\" >> .env
          echo MAC_SIGNING_KEY_USER_NAME=\""${{ secrets.MAC_SIGNING_KEY_USER_NAME }}"\" >> .env
          echo MAC_SIGNING_NOTARIZATION_USER_NAME=\""${{ secrets.MAC_SIGNING_NOTARIZATION_USER_NAME }}"\" >> .env
          echo MAC_SIGNING_NOTARIZATION_PASSWORD=\""${{ secrets.MAC_SIGNING_NOTARIZATION_PASSWORD }}"\" >> .env
          echo MAC_SIGNING_EMBEDDED_PROVISIONPROFILE_FILE_PATH=\""${{ steps.keychain.outputs.PP_PATH }}"\" >> .env

      # BUILD FOR DISTRIBUTION
      - id: build
        name: Build distribution
        run: |
          brew install coreutils
          sh build-mac-release.sh
          sh build-mac-notarize.sh

      # SAVE INSTALLER
      - id: upload-installer
        name: Upload installer
        uses: actions/upload-artifact@v4
        with:
          path: ./build/distributions/Basic4GLj-${{ vars.APP_RELEASE_VERSION }}.dmg
          name: macos-intel-installer
          retention-days: 1

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    environment: Production
    permissions:
      contents: write
      deployments: write
    needs: [build-jar-release, build-linux-installer, build-windows-installer, build-macos-arm64-installer, build-macos-intel-installer]
    steps:

      # DOWNLOAD INSTALLERS

      - id: download-jar-release
        name: Download JAR Release
        uses: actions/download-artifact@v4
        with:
          name: jar-release

      - id: download-linux-installer
        name: Download Linux installer
        uses: actions/download-artifact@v4
        with:
          name: linux-installer

      - id: download-windows-installer
        name: Download Windows installer
        uses: actions/download-artifact@v4
        with:
          name: windows-installer

      - id: download-macos-arm64-installer
        name: Download Mac installer (arm64)
        uses: actions/download-artifact@v4
        with:
          name: macos-arm64-installer

      - id: rename-downloaded-macos-arm64-files
        name: Rename downloaded macOS (arm64) files
        run: |
          # rename artifacts to match release tag for pre-release builds < 1.0 for now;
          # macos builds require versions start with 1.X, but alpha builds are currently tagged as 0.X
          mv Basic4GLj-${{ vars.APP_RELEASE_VERSION }}.dmg Basic4GLj-${{ vars.BUILD_RELEASE_TAG }}-arm64.dmg

      - id: download-macos-intel-installer
        name: Download Mac installer (Intel)
        uses: actions/download-artifact@v4
        with:
          name: macos-intel-installer

      - id: rename-downloaded-macos-intel-files
        name: Rename downloaded macOS (Intel) files
        run: |
          # rename artifacts to match release tag for pre-release builds < 1.0 for now;
          # macos builds require versions start with 1.X, but alpha builds are currently tagged as 0.X
          mv Basic4GLj-${{ vars.APP_RELEASE_VERSION }}.dmg Basic4GLj-${{ vars.BUILD_RELEASE_TAG }}-intel.dmg

      - id: rename-downloaded-files
        name: Rename downloaded files
        run: |
          ls -alR
          # rename artifacts to match release tag for pre-release builds < 1.0 for now - for consistency with macOS builds
          mv app.zip basic4glj_${{ vars.BUILD_RELEASE_TAG }}.zip
          mv Basic4GLj-${{ vars.APP_RELEASE_VERSION }}.msi Basic4GLj-${{ vars.BUILD_RELEASE_TAG }}.msi
          mv basic4glj_${{ vars.APP_RELEASE_VERSION }}-1_amd64.deb basic4glj_${{ vars.BUILD_RELEASE_TAG }}.deb
          ls -alR

      # CREATE GITHUB RELEASE AND ADD ASSETS
      - id: tag
        name: Move release tag
        shell: bash
        if: false
        run: |
          # Move tag
          git tag -d ${{ vars.BUILD_RELEASE_TAG }}
          git push --delete origin ${{ vars.BUILD_RELEASE_TAG }}
          git tag -a ${{ vars.BUILD_RELEASE_TAG }} -m "${{ vars.BUILD_RELEASE_TAG }}"
          git push --follow-tags
      - id: create-release
        name: Create GitHub release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ vars.BUILD_RELEASE_TAG }}
          release_name: ${{ vars.BUILD_RELEASE_TAG }}
          draft: true
          prerelease: true
      - id: release-jar-package
        name: Release JAR package
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: basic4glj_${{ vars.BUILD_RELEASE_TAG }}.zip
          asset_name: basic4glj_${{ vars.BUILD_RELEASE_TAG }}.zip
          asset_content_type: application/x-binary
      - id: release-linux-installer
        name: Release Linux installer
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: basic4glj_${{ vars.BUILD_RELEASE_TAG }}.deb
          asset_name: basic4glj_${{ vars.BUILD_RELEASE_TAG }}.deb
          asset_content_type: application/x-binary
      - id: release-windows-installer
        name: Release Windows installer
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: Basic4GLj-${{ vars.BUILD_RELEASE_TAG }}.msi
          asset_name: Basic4GLj-${{ vars.BUILD_RELEASE_TAG }}.msi
          asset_content_type: application/x-binary
      - id: release-macos-arm64-installer
        name: Release Mac DMG (arm64)
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: Basic4GLj-${{ vars.BUILD_RELEASE_TAG }}-arm64.dmg
          asset_name: Basic4GLj-${{ vars.BUILD_RELEASE_TAG }}-arm64.dmg
          asset_content_type: application/x-binary
      - id: release-macos-intel-installer
        name: Release Mac DMG (Intel)
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: Basic4GLj-${{ vars.BUILD_RELEASE_TAG }}-intel.dmg
          asset_name: Basic4GLj-${{ vars.BUILD_RELEASE_TAG }}-intel.dmg
          asset_content_type: application/x-binary