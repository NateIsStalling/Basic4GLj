plugins {
    id "application"
    id("com.diffplug.spotless") version "7.0.2"
}
apply plugin: "java"

configurations {
    release.extendsFrom configurations.default
}

ext {
    javaMainClass = "com.basic4gl.desktop.MainWindow"
}


repositories {
    mavenCentral()
}

application {
    mainClassName = javaMainClass
//    applicationDefaultJvmArgs = ['-Djava.library.path=native/']
    startScripts {
        applicationName = "Basic4GLj"

        def template = "${rootProject.projectDir}/gradle/unixStartScript.txt"
        unixStartScriptGenerator.template = resources.text.fromFile(template)
    }
}

// Create a pathing Jar to provide classpath file for Windows distribution; requires JDK 9+
task pathingJar(type: Jar) {

    dependsOn (":debugServer:jar")
    dependsOn (":library:jar")
    archiveAppendix = 'pathing'
    doFirst {
        manifest {
            attributes "Class-Path": configurations.release.files.collect { it.name }.join(' ')
        }
    }
}

// Include pathing Jar in distributions
distributions {
    main {
        contents {
            from(pathingJar) {
                into "lib"
            }
        }
    }
}

// Apply pathing Jar to classpath
startScripts {
    dependsOn(jar)
    dependsOn(pathingJar)
    classpath = ((Jar)jar).outputs.files + ((Jar)pathingJar).outputs.files
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    // TODO figure out a clean way to depend on the JAR output of these projects;
    //  need to launch these projects as separate Java processes at runtime
    runtimeOnly project(':library')
    runtimeOnly project(':debugServer')

    // TODO cleanup project dependencies; would prefer to treat these projects as plugins
    implementation project(":runtime")
    implementation project(":compiler")
    implementation project(":library")
    implementation project(":debugProtocol")

    implementation 'com.fifesoft:rsyntaxtextarea:3.3.4'
    implementation 'com.fifesoft:rstaui:3.3.1'

    implementation 'com.formdev:flatlaf:3.5.4'
    // for FlatDesktop Java 8 backports
    implementation 'com.formdev:flatlaf-extras:3.5.4'

    // for IS_OS_MAC flag for OS specific behavior
    implementation("org.apache.commons:commons-lang3:3.14.0")

    // for debugger
    implementation ('com.google.code.gson:gson:2.10')
    implementation ('javax.websocket:javax.websocket-api:1.0')
    implementation ('org.eclipse.jetty.websocket:javax-websocket-client-impl:9.4.49.v20220914')

    testImplementation 'junit:junit:4.12'
}

spotless {
    java {
        // Use the default importOrder configuration
        importOrder()

        removeUnusedImports()

        // Cleanthat will refactor your code, but it may break your style: apply it before your formatter
        cleanthat()          // has its own section below

        // apply a specific flavor of google-java-format
        googleJavaFormat().reflowLongStrings().skipJavadocFormatting()
        // fix formatting of type annotations
        formatAnnotations()

        trimTrailingWhitespace()
        leadingSpacesToTabs()
    }
}

build.dependsOn spotlessApply

jar {
    dependsOn(pathingJar)
    from { ((Jar)pathingJar).outputs.files.collect { it.isDirectory() ? it : zipTree(it) }  }
    from { configurations.release.collect { it.isDirectory() ? it : zipTree(it) } }
    from sourceSets.test.output
    manifest {
        attributes (
            'Main-Class': javaMainClass,
            'Class-Path': files(((Jar)pathingJar).archiveFile)
        )
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    exclude 'META-INF/.RSA', 'META-INF/.SF', 'META-INF/*.DSA'
}


task copyTask() {
    copy {
        from '../samples'
        into 'build/samples'
    }
    copy {
        from 'LICENSES'
        into 'build/LICENSES'
    }
}

task debugAll {
    dependsOn (":debugServer:jar")
    dependsOn (":library:jar") {
        println(rootProject.ext.get("libraryJarPath"))
        println(rootProject.ext.get("debugServerJarPath"))
        run {
        args rootProject.ext.get("libraryJarPath"),
            rootProject.ext.get("debugServerJarPath")
        }
    }
}