plugins {
    id "application"
}
apply plugin: "java"

ext {
    javaMainClass = "com.basic4gl.desktop.MainWindow"
}


repositories {
    mavenCentral()
}

application {
    mainClassName = javaMainClass
//    applicationDefaultJvmArgs = ['-Djava.library.path=native/']
    startScripts {
        def template = "${rootProject.projectDir}/gradle/unixStartScript.txt"
        unixStartScriptGenerator.template = resources.text.fromFile(template)
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    // TODO figure out a clean way to depend on the JAR output of these projects;
    //  need to launch these projects as separate Java processes at runtime
    runtimeOnly project(':library')
    runtimeOnly project(':debugServer')

    // TODO cleanup project dependencies; would prefer to treat these projects as plugins
    implementation project(":runtime")
    implementation project(":compiler")
    implementation project(":library")
    implementation project(":debugProtocol")

//    implementation RSyntaxTextArea

    implementation 'com.formdev:flatlaf:3.0'
    // for FlatDesktop Java 8 backports
    implementation 'com.formdev:flatlaf-extras:3.0'

    // for debugger
    implementation ('com.google.code.gson:gson:2.10')
    implementation ('javax.websocket:javax.websocket-api:1.0')
    implementation ('org.eclipse.jetty.websocket:javax-websocket-client-impl:9.4.49.v20220914')

    testCompile 'junit:junit:4.12'
}

jar {
//    dependsOn (":debugServer:jar")
//    dependsOn (":library:jar")
    from { configurations.default.collect { it.isDirectory() ? it : zipTree(it) } }
    from sourceSets.test.output
    manifest {
        attributes (
            'Main-Class': javaMainClass,
            'Class-Path': configurations.default.files.collect { it.name }.join(' ')
        )
    }
    exclude 'META-INF/.RSA', 'META-INF/.SF','META-INF/*.DSA'
}
//
//task withRuntime(type: "jar"){
//    from sourceSets.all
//
//}
task copyTask() {
    copy {
        from '../samples'
        into 'build/samples'
    }
    copy {
        from 'LICENSES'
        into 'build/LICENSES'
    }
}

task debugAll {
    dependsOn (":debugServer:jar")
    dependsOn (":library:jar") {
        println(rootProject.ext.get("libraryJarPath"))
        println(rootProject.ext.get("debugServerJarPath"))
        run {
        args rootProject.ext.get("libraryJarPath"),
            rootProject.ext.get("debugServerJarPath")
        }
    }
}

repositories {
    mavenCentral()
}
